%!PS

% PyonScript programming language
% Definitions: Core operations



% pyon -- PyonScript object eval operator
%   Evaluates top item on stack:
%   If string, evaluate as a PyonScript S-expression:
%      Recursively pyon each subexpression starting with the postinitial.
%      Then pyon the initial subexpression if it exists.
%      Then call exec on the top item of the stack.
%   If executable name, load bound value from current dictionary.
%   Otherwise, do nothing.
%   obj pyon -> <result>
/pyon
{
    dup type /nametype eq
    {
        dup xcheck
        {
            % For executable name, load object bound to name
	    % in current environment
            load
        } if
    }
    {
        dup type /stringtype eq
        {
            % Evaluate S-expression for non-empty expressions
            token
            {
		% Hold operator
		[ exch ]
		{
		    % For all arguments
		    {
			% Get next argument
			token
			{
			    % Hold remaining arguments
			    exch [ exch ]
			    {
				% Pyon current argument
				pyon
			    } .runandhide
			    % Retrieve remaining arguments
			    aload pop
			}
			{
			    % Done with arguments; exit
			    exit
			} ifelse
		    } loop
		} .runandhide

		% Retrieve operator and pyon it
		aload pop pyon 
            } if

            % Exec top value
            exec
        } if
    } ifelse
} bind odef


% pyonrun -- execute file, string, or array as PyonScript code
%   string pyonrun -> <result>
%   file pyonrun -> <result>
/pyonrun
{
    dup string?
    {
	{
	    token
	    {
		exch [ exch ]
		{
		    pyon
		} .runandhide % hold string
		aload pop
	    }
	    {
		exit
	    } ifelse
	} loop
    }
    {
	dup file?
	{
	    {
		dup token
		{
		    exch [ exch ]
		    {
			pyon
		    } .runandhide % hold file
		    aload pop
		}
		{
		    closefile exit
		} ifelse
	    } loop
	}
	{
	    % array
	    {pyon} forall
	} ifelse
    } ifelse
} bind odef
