%!PS

% PyonScript programming language
% Main interpreter


% PyonScript evaluation stacks
/_stacklevel 0 def
/_operatorstack << >> def
/_argumentstack << >> def


% Interactive shell:
%   modifications of executive and prompt procedures in Ghostscript
%   TODO: fix to handle errors properly; more PyonScript-specific messages
/pyonshell
{
    {
        pyonprompt
        { (%statementedit) (r) .systemvmfile } stopped
        { pop pop $error /errorname get /undefinedfilename eq
            { .clearerror exit } if		% EOF
            /handleerror .systemvar exec //null		% ioerror??
        } if 
        %	    cvx { .runexec } .execute pop
        % replaced above line with below
        /_execline exch def
        {
	    % apply pyon operator to line for each token
	    { _execline token {pyon} {exit} ifelse } loop
	} stopped
	{
              /handleerror .systemvar exec
        } if 
    } loop
} bind def

/pyonprompt
{
    flush flushpage NOPROMPT not
    {
	(pyon) print
	count 0 ne {(<) print count =only} if
	(> ) print flush
    } if
} bind def



% Start PyonScript user dictionary
<< >> begin

% Interpreter for provided files
userdict /ARGUMENTS .knownget
{
    % Interpret PyonScript source

    % Command-line arguments
    /_arguments exch def

    _arguments length 0 gt
    {
        % Interpret all source files
        _arguments
        {
            % Individual source file
            /_programfile exch (r) file def

            {
                _programfile token
                {
                    % Evaluate token as PyonScript
                    pyon
                }
                {
                    % Done processing
                    exit
                } ifelse
            } loop

            % Close file
            _programfile closefile
        } forall
    }
    {
        % PyonScript called with no source file; start interactive shell
         pyonshell
    } ifelse
} if
