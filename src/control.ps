%!PS

% PyonScript programming language
% Definitions: Control structures


% && -- logical and with shortcut; returns true iff both procedures do
%   proc proc && -> bool
/&&
{
    exch .runandhide % hold B, run A
    exch { exec } { pop false } ifelse
} bind odef

% || -- logical or with shortcut; returns true if at least one procedure does
%   proc proc || -> bool
/||
{
    exch .runandhide % hold B, run A
    exch { pop true } { exec } ifelse
} bind odef

% while -- while loop:
%          check cond: if true, execute procedure and repeat; else, exit
%   cond proc while -> <result>
/while
{
    [ 3 1 roll
    exch {exec} aload pop
    3 2 roll
    {{exit} ifelse} aload pop
    ] cvx loop
} bind odef

% until -- until loop:
%          check cond: if false, execute procedure and repeat; else, exit
%   cond proc until -> <result>
/until
{
    [ 3 1 roll
    exch {exec {exit}} aload pop
    4 3 roll
    {ifelse} aload pop
    ] cvx loop
} bind odef

% dowhile -- do ... while loop:
%            execute procedure; check cond: if true, repeat; else, exit
%   cond proc dowhile -> <result>
/dowhile
{
    [ 3 1 roll
    {exec} aload pop
    3 2 roll
    {exec not {exit} if} aload pop
    ] cvx loop
} bind odef

% dountil -- do ... until loop:
%            execute procedure; check cond: if true, exit; else, repeat
%   cond proc dountil -> <result>
/dountil
{
    [ 3 1 roll
    {exec} aload pop
    3 2 roll
    {exec {exit} if} aload pop
    ] cvx loop
} bind odef

% upto -- execute procedure for all ints in range, inclusive, with step of 1
%   start end proc upto -> <result>
/upto
{
    1 3 1 roll for
} bind odef

% downto -- execute procedure for all ints in range, inclusive, with step of -1
%   start end proc downto -> <result>
/downto
{
    -1 3 1 roll for
} bind odef


% : -- create procedure that executes a given object and returns itself
%      (executable quine with side effects)
%      given an input X, produces the procedure
%          {X exec [{X exec [aload 7 1 roll] cvx} aload 7 1 roll] cvx}
%   proc : -> proc
/:
{
    [ exch {exec [} aload pop
	[ 3 index
	    {exec [ aload 7 1 roll ] cvx} aload pop
	] cvx
	{aload 7 1 roll ] cvx} aload pop
    ] cvx
} bind odef

% lambda -- create a procedure with local bindings
%           binds a single variable or an array of variables
%           (due to implementation reasons, this may exceed the dictionary
%           stack if deeply embedded)
%   name proc lambda -> proc
%   array proc lambda -> proc
/lambda
{
    [
	% set up current environment as local environment for exec
	<< >> begin ARRAYMAX array dictstack end
	{ dup [ {{begin} forall} aload pop } aload
	    % save dictstack for cleanup; intervening code must be escaped
	length 4 add -2 roll    % mark setup var proc

	% bind variable(s)
	{
	    dup name?
	    {
		% bind to top item on stack
		{{ exch def } aload pop} aload pop
	    }
	    {
		% bind to top items in reverse
		reverse
		{{ { exch def } forall } aload pop} aload pop
	    } ifelse
	} .runandhide % hold procedure
	
	% execute procedure
	{{ exec } aload pop} aload pop

	% cleanup; unload local environment from dictionary stack
	{ ] cvx .runandhide length {end} repeat } aload pop
    ] cvx
} bind odef

% fun -- create a function that binds one or more variables
%        in the top level dictionary;
%        designed for tail recursion, and has garbage collection
%   name proc fun -> proc
%   array proc fun -> proc
/fun
{
    [
	3 1 roll
	{
	    dup name?
	    {
		% bind to top item on stack
		{ exch def } aload pop
	    }
	    {
		% bind to top items in reverse
		reverse
		{ { exch def } forall } aload pop
	    } ifelse
	} .runandhide
	{exec} aload pop
    ] cvx
} bind odef

% defun -- define a function using fun
%   name name proc defun -> -
%   name array proc defun -> -
/defun
{
    fun def
} bind odef

% defl -- define a lambda
%   name name proc defl -> -
%   name array proc defl -> -
/defl
{
    lambda def
} bind odef


% @ -- create a procedure from an array of S-expressions or a single object
%   array @ -> proc
%   obj @ -> proc
/@
{
    dup array?
    {
	[ exch {pyonrun} aload pop ] cvx
    }
    {
	[ exch [ exch ] {0 get exec} aload pop ] cvx
    } ifelse
} bind odef

% control structures with @ applied to procedure arguments, for convenience
/@for {@ for} bind odef
/@repeat {@ repeat} bind odef
/@loop {@ loop} bind odef
/@if {@ if} bind odef
/@ifelse {@ exch @ exch ifelse} bind odef
/@while {@ exch @ exch while} bind odef
/@until {@ exch @ exch until} bind odef
/@dowhile {@ exch @ exch dowhile} bind odef
/@dountil {@ exch @ exch dountil} bind odef
/@upto {@ upto} bind odef
/@downto {@ downto} bind odef
/@|| {@ exch @ exch ||} bind odef
/@&& {@ exch @ exch &&} bind odef
/@: {@ :} bind odef
/@lambda {@ lambda} bind odef
/@fun {@ fun} bind odef
/@defl {@ defl} bind odef
/@defun {@ defun} bind odef
